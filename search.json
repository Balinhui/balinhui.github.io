[{"title":"Ai API for Java","url":"/2025/06/05/AiAPIForJava/","content":"\n这是一个通过Java调用如deepseek等ai的工具，使用十分简单。\nGithub: https://github.com/Balinhui/ai-api-for-java\n\n# 使用列：\n\n## 普通调用，未开启stream流\n\n```java\nimport org.balinhui.core.Client;\nimport org.balinhui.core.ResponseList;\nimport org.balinhui.json.Request;\nimport org.balinhui.json.Response;\nimport org.balinhui.json.widgets.Message;\n\npublic class UseAPI {\n    public static void main(String[] args) {\n        Message system = new Message(Message.SYSTEM, \"你是一个猫娘\");\n        Message user = new Message(Message.USER, \"你好\");\n        Request request = new Request(\"a model\", system, user);\n        Client client = new Client(\"Your API_URL\", \"Your API_KEY\", request);\n        ResponseList<Response> responseList = client.getResponseList();\n        System.out.println(responseList.getFirst().getChoices()[0].getMessage().getContent());\n\n        //或者\n        ResponseList<Response> responseList1 = client.getResponseList(System.out::print);\n        System.out.println();\n    }\n}\n```\n\n## 普通调用，开启stream流\n\n```java\nimport org.balinhui.core.Client;\nimport org.balinhui.core.Client;import org.balinhui.core.Client;import org.balinhui.core.ResponseList;\nimport org.balinhui.json.Request;\nimport org.balinhui.json.Response;\nimport org.balinhui.json.widgets.Message;\n\nimport java.util.List;\n\npublic class UseAPI {\n    public static void main(String[] args) {\n        Message system = new Message(Message.SYSTEM, \"你是一个猫娘\");\n        Message user = new Message(Message.USER, \"你好\");\n        Request request = new Request(\"a model\", true, system, user);\n        Client client = new Client(\"Your API_URL\", \"Your API_KEY\", request);\n        ResponseList<Response> list = client.getResponseList(response -> System.out.print(response.getChoices()[0].getDelta().getContent()));\n        System.out.println();\n    }\n}\n```\n# 内容\n## package\ncore(项目中主要的功能)\n> [Client](src/main/java/org/balinhui/core/Client.java): 发送请求[Request](src/main/java/org/balinhui/json/Request.java)并返回响应[Response](src/main/java/org/balinhui/json/Response.java)<br>\n> Client中`API_KEY`，`API_URL`和`Request`必须设置，传入参数后，用`getResponseList`取得响应<br>\n> 可以为`getResponseList`传入[OnAddAction](src/main/java/org/balinhui/core/OnAddAction.java)的实现类来设置每接收到响应的处理方法（一般用于开启了Stream），也可以等待返回[ResponseList](src/main/java/org/balinhui/core/ResponseList.java)后对其处理（一般用于未开启Stream）\n> ```java\n> Client client = new Client(\"URL\", \"KEY\", request);\n> ResponseList<Response> responseList =  client.getResponseList();//对responseList处理\n> //或\n> client.getResponseList(response -> {\n>   //TODO 对每次得到的response处理\n> });\n> ```\n> 注意！！！每次调用Call中的getResponseList()等方法时，都会创建一个新请求并发送，请不要将此放入循环中\n\n> [OnAddAction](src/main/java/org/balinhui/core/OnAddAction.java): 在[Response](src/main/java/org/balinhui/json/Response.java)被添加进[ResponseList](src/main/java/org/balinhui/core/ResponseList.java)时调用，实现它即可实现添加后的操作\n> ```java\n> import org.balinhui.core.OnAddAction;\n> import org.balinhui.json.Response;\n> public class ActionImp implements OnAddAction<Response> {\n>     @Override\n>     public void onAdd(Response response) {\n>           //TODO 处理response\n>     }\n> }\n> ```\n\n> [ResponseList](src/main/java/org/balinhui/core/ResponseList.java): 用于存[response](src/main/java/org/balinhui/json/Response.java)的集合\n\nexception(异常)\n> [DuplicateAdditionException](src/main/java/org/balinhui/exceptions/DuplicateAdditionException.java): 在使用[Loader](src/main/java/org/balinhui/util/Loader.java)重复加载对话时抛出。所以请小心使用哦~\n\njson(Java类与json的互相转换，通过[`jackson`](https://github.com/FasterXML/jackson-databind))\n> [widgets](src/main/java/org/balinhui/json/widgets): 里面都是一些json实例化Java对象的小组件其中较为重要的是[Message](src/main/java/org/balinhui/json/widgets/Message.java)，不但用于接收响应的实列化对象，而且可以通过实列化对象转化成请求\n> ```java\n> Message massage = new Message(Message.USER, \"你好\");\n> ```\n\n> [Request](src/main/java/org/balinhui/json/Request.java): 发送的请求\n> ```java\n> Request request = new Request(\"model\", message);\n> ```\n\n> [Response](src/main/java/org/balinhui/json/Response.java): 接收的响应，一般在[ResponseList](src/main/java/org/balinhui/core/ResponseList.java)中取得\n\n> [Wrong](src/main/java/org/balinhui/json/Wrong.java): 部分报错信息\n\nutil(工具)\n> [Loader](src/main/java/org/balinhui/util/Loader.java): 加载历史对话，与[LogFile](src/main/java/org/balinhui/util/LogFile.java)中的`getLogList()`使用。`load(int i)`需要传入`getLogList()`的索引\n> ```java\n> System.out.println(LogFile.getLogList());\n> Loader.getLoader.load(0);\n> ```\n\n> [Logger](src/main/java/org/balinhui/util/Logger.java): 将字符串存入`ai.log.md`文件\n\n> [Store](src/main/java/org/balinhui/util/Store.java): 保存对话记录。要开启此功能需要设置[Client](src/main/java/org/balinhui/core/Client.java)中的`ableStore`为`true`。\n\n> [Reader](src/main/java/org/balinhui/util/Reader.java): 可以用于加载配置，输入一个格式为apiKey=...，apiUrl=...的.properties文件，用`getConfig`获取。\n","tags":["project"]},{"title":"如何使用Markdown","url":"/2024/12/09/如何使用Markdown/","content":"\n用于自己以后写Markdown\n\n# 标题\n用# （后面要有空格）来表示\n```Mackdown\n    # 一级标题\n    ## 二级标题\n    ### 三级标题\n    #### 四级标题\n    ##### 五级标题\n    ###### 六级标题\n```\n\n# 字体\n## 斜体\n`*这是斜体*` *这是斜体*\n\n`_这是斜体_` _这是斜体_\n\n## 粗体\n`**这是粗体**` **这是粗体**\n\n`__这是粗体__` __这是粗体__\n\n## 粗斜体\n`***这是粗斜体***` ***这是粗斜体***\n\n`___这是粗斜体___` ___这是粗斜体___\n\n# 换行\n1. 直接在一句话后敲两个空格\n2. 两句话之间加一个空行\n3. 如果你在编辑的时候，想让一行文字在显示的时候换行，就在中间加`<br>`\n\n# 引用\n用`>`来表示引用，后面的空格可有可无，一行空格来结束引用\n\n```Markdown\n    > 这是一个引用\n    >> 这是一个引用中的引用\n    >>> 这是一个引用中的引用中的引用\n```\n\n# 链接\n```Markdown\n    [链接名](链接)\n    或\n    <链接>\n\n    [balinhui](https://balinhui.github.io)\n    或\n    <https://balinhui.github.io>\n```\n\n# 图片\n```Markdown\n    ![图片描述，可写可不写，但是中括号要有](图片链接，本地或URL#pic_center空格=长x宽)\n\n    ![balinhui](https://raw.githubusercontent.com/Balinhui/balinhui.github.io/refs/heads/main/covers/cover.webp#pic_center =200x100)\n```\n\n# 列表\n## 有序列表\n数字后加`.`再加空格\n\n## 无序列表\n用`*`,`+`,`-`,再加空格\n\n\n```Markdown\n    * 无序列表 1\n    + 无序列表 2\n    - 无序列表 3\n\n    1. 有序列表 1\n    2. 有序列表 2\n    3. 有序列表 3\n```\n控制层级\n```Markdown\n    + 无序列表 1\n    + 无序列表 2\n\t    + 无序列表 2.1\n\t    + 无序列表 2.2\n\n    1. 有序列表 1\n\t    1.1 有序列表 1.1\n    2. 有序列表 2\n\t    2.1 有序列表2.1\n```\n\n# 分割线\n用-或*，注意分割线上面要空格\n\n```Markdown\n    分割线：\n\n    ---\n    ***\n    - - -\n    * * *\n```\n\n# 删除线\n在要删除的文字左右两边加上`~~`\n\n```Markdown\n    ~~要被删除的文字~~\n```\n\n# 下划线\n\n在要下划线的文字左右两边加上`<u>文本</u>`\n\n```Markdown\n    <u>要添加下划线的文本</u>\n```\n\n# 代码块\n## 一行代码\n将代码前后用`括起来\n\n```Markdown\n    `Hello` World\n```\n\n## 一块代码\n要在代码前后用三个`，并在前三个后写下语言类型\n```Markdown\n    ```java\n        public class HelloWorld {\n            public static void main(String[] args) {\n                System.out.println(\"Hello World\");\n            }\n        }\n    三个`\n```\n\n# 脚注\n对文本进行标注\n```Markdown\n    Mackdown[^1],java[^2]\n    [^1] Markdown\n    [^2] java\n```\n\nMackdown[^1]\n[^1] Markdown\n\n# 未完待续","tags":["markdown"]},{"title":"移除C盘以外的Program_Files","url":"/2024/12/08/移除C盘以外的Program-Files/","content":"\n每当我在设置Xbox安装路径时，或者~~不小心~~更改了Microsoft Store中的应用的安装路径时，对应的盘下总会生成Program Files文件夹，而且还删不掉。我已知这个文件没用，又想把它删掉，那该怎么办呢？\n# 解决方法\n直接删除是没有用的，重启后还会回来<br>\n\n## 获取所有卷信息\n可以打开PowerShell，以管理员身份运行，使用命令`Get-AppxVolume`查看WindowsApps挂载在哪些盘上\n```PowerShell\n    PS C:\\Windows\\System32> Get-AppxVolume\n```\n此时，除了C盘，还看到有其他盘挂载了WindowsApps\n\n## 删除不用的卷\n使用命令`Remove-AppxVolume -Volume`后面加上空格和前面的ID`{d22g2f23ft-sdgay-26fg62-32dawf}`或盘符`D:\\`\n```PowerShell\n    PS C:\\Windows\\System32> Remove-AppxVolume -Volume D:\\\n```\n回车后用`Get-AppxVolume`命令再次查看<br>\n只剩C盘后就说明成功\n\n之后就是更改文件夹属性，然后删除就行了","tags":["windows"]},{"title":"Hello World","url":"/2013/12/24/hello-world/","content":"\nWelcome to [Hexo](http://zespia.tw/hexo)! This is your very first post. Check [documentation](http://zespia.tw/hexo/docs) to learn how to use.\n"}]